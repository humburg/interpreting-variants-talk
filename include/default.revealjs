<!DOCTYPE html>
<html$if(lang)$ lang="$lang$"$endif$>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
$for(author-meta)$
  <meta name="author" content="$author-meta$" />
$endfor$
$if(date-meta)$
  <meta name="dcterms.date" content="$date-meta$" />
$endif$
  <title>$if(title-prefix)$$title-prefix$ - $endif$$pagetitle$</title>
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <link rel="stylesheet" href="$revealjs-url$/css/reveal.min.css"/>
    <style type="text/css">code{white-space: pre;}</style>
$if(highlighting-css)$
    <style type="text/css">
$highlighting-css$
    </style>
$endif$
$if(css)$
$for(css)$
    <link rel="stylesheet" href="$css$"/>
$endfor$
$else$
    <link rel="stylesheet" href="$revealjs-url$/css/theme/$theme$.css" id="theme">
$endif$
    <!-- If the query includes 'print-pdf', include the PDF print sheet -->
    <script>
      if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = '$revealjs-url$/css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
      }
    </script>
    <!--[if lt IE 9]>
    <script src="$revealjs-url$/lib/js/html5shiv.js"></script>
    <![endif]-->
$if(math)$
    $math$
$endif$
$for(header-includes)$
    $header-includes$
$endfor$
</head>
<body>
$for(include-before)$
$include-before$
$endfor$
  <div class="reveal">
  	<div class="headerWrapper">
	  	<div class="header">
	      	<div class="logo">
	      	  <img src="figure/ox_brand.gif" alt="University of Oxford">
	      	</div>
	    </div>
    </div>
    <div class="slides">
      
$if(title)$
<section>
    <h1 class="title">$title$</h1>
$if(subtitle)$
  <h1 class="subtitle">$subtitle$</h1>
$endif$
$for(author)$
    <h2 class="author">$author$</h2>
$endfor$
    <h3 class="date">$date$</h3>
</section>
$endif$
$if(toc)$
<section id="$idprefix$TOC">
<h1>$if(toc-header)$$toc-header$$else$Table of Contents$endif$</h1>
$toc$
</section>
$endif$

$body$
    </div>
  </div>


  <script src="$revealjs-url$/lib/js/head.min.js"></script>
  <script src="$revealjs-url$/js/reveal.min.js"></script>

  <script>

      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,
        slideNumber: true,
        theme: $if(theme)$'$theme$'$else$Reveal.getQueryHash().theme$endif$, // available themes are in /css/theme
        transition: $if(transition)$'$transition$'$else$Reveal.getQueryHash().transition || 'default'$endif$, // default/cube/page/concave/zoom/linear/fade/none

        // Optional libraries used to extend on reveal.js
        dependencies: [
          { src: '$revealjs-url$/lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: '$revealjs-url$/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
          { src: '$revealjs-url$/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } },
//          { src: '$revealjs-url$/plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; }, }
//          { src: '$revealjs-url$/plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
]});

function getCSS(className_) {
    var styleSheets = window.document.styleSheets;
    var styleSheetsLength = styleSheets.length;
    for(var i = 0; i < styleSheetsLength; i++){
        var classes = styleSheets[i].rules || styleSheets[i].cssRules;
        var classesLength = classes.length;
        for (var x = 0; x < classesLength; x++) {
            if (classes[x].selectorText == className_) {
                var ret;
                if(classes[x].cssText){
                    ret = classes[x].cssText;
                } else {
                    ret = classes[x].style.cssText;
                }
                if(ret.indexOf(classes[x].selectorText) == -1){
                    ret = classes[x].selectorText + "{" + ret + "}";
                }
                return ret;
            }
        }
    }

}

function getHeaderFontSize(){
	var style = getCSS(".reveal .header h1");
	var pattern = /font-size\:\s*(\d+\.*\d*)(\w+)/;
	var match = pattern.exec(getCSS('.reveal .header h1'));
	var fontSize = match[1];
	if(match[2] == "em"){
		defaultSize = getDefaultFontSize(document.querySelector('.reveal .header'));
		fontSize = fontSize*defaultSize;
	}
	return fontSize;
}


function getTitleSize(text, fontFace, fontSize){
	// setup variables
	var c = document.createElement('canvas');
    var div = document.createElement('div');
    div.style.font = fontFace;
    div.style.fontSize = fontSize;
    div.innerHTML = text;
    
	// set canvas's size to be equal with div
	parent = document.querySelector('.reveal .header'); 
	parent.appendChild(div);
	c.width = div.offsetWidth;
	c.height = div.offsetHeight;
	parent.removeChild(div);
	
	var ctx = c.getContext('2d');
	// get div's font from computed style and apply it to context
	ctx.font = fontFace;
	// use color other than black because all pixels are 0 when black and transparent
	ctx.fillStyle = '#bbb';
	// draw the text near the bottom of the canvas
	ctx.fillText(div.innerText, 0, div.offsetHeight);
	
	// loop trough the canvas' data to find first colored pixel
	var data = ctx.getImageData(0, 0, c.width, c.height).data,
	minY = 0, minX = 0, len = data.length;
	for (var i = 0; i < len; i += 4) {
	    // when you found it
	    if (data[i] != 0) {
	        // get pixel's y position
	        minY = Math.floor(i / 4 / c.width);
	        break;
	    }
	}

	return { width: c.width, height: c.height - minY + 'px'};
}

function getDefaultFontSize(parentElement)
{
    parentElement = parentElement || document.body;
    var div = document.createElement('div');
    div.style.width = "1000em";
    parentElement.appendChild(div);
    var pixels = div.offsetWidth / 1000;
    parentElement.removeChild(div);
    return pixels;
}

  // hide header on title slides
  Element.prototype.hasClass = function hasClass(className) {
    return this.className && new RegExp('(^|\\s)' + className + '(\\s|$$)').test(this.className);
  }
  Element.prototype.isTitle = function isTitle() {
  	return Reveal.getIndices()["h"] == 0 ||  this.hasClass("titleslide");
  }
  
  // display slide title as part of header
  Element.prototype.getStyle = function getStyle(cssprop){
 	if (this.currentStyle) //IE
  		return this.currentStyle[cssprop];
 	else if (document.defaultView && document.defaultView.getComputedStyle) //Firefox
  		return document.defaultView.getComputedStyle(this, "")[cssprop];
 	else //try and get inline style
  		return this.style[cssprop];
}
  
  function getComputedHeaderSize(width, height) {
		var wrapper = document.querySelector( '.reveal .headerWrapper');
		var config = Reveal.getConfig();
		var size = {
			// Header size
			width: width,
			height: height,
			presentationWidth: wrapper.offsetWidth,
			presentationHeight: wrapper.offsetHeight
		};

		// Reduce available space by margin
		size.presentationWidth -= ( size.presentationHeight * config.margin );
		size.presentationHeight -= ( size.presentationHeight * config.margin );

		// Slide width may be a percentage of available width
		if( typeof size.width === 'string' && /%$$/.test( size.width ) ) {
			size.width = parseInt( size.width, 10 ) / 100 * size.presentationWidth;
		}

		// Slide height may be a percentage of available height
		if( typeof size.height === 'string' && /%$$/.test( size.height ) ) {
			size.height = parseInt( size.height, 10 ) / 100 * size.presentationHeight;
		}
		size.height = parseInt(size.height);
		size.width = parseInt(size.width);
		return size;

	}
  function setHeaderScale(element, width, height){
  	if( document.querySelector( '.reveal' )) {
		var config = Reveal.getConfig();
		var wrapper = document.querySelector( '.reveal .headerWrapper');
		width = width || element.offsetWidth;
		height = height || element.offsetHeight;
		size = getComputedHeaderSize(width, height);
		
		var isMobileDevice = navigator.userAgent.match( /(iphone|ipod|ipad|android)/gi );
				// Determine scale of content to fit within available space
		scale = Math.min( size.presentationWidth / size.width, size.presentationHeight / size.height );

		// Respect max/min scale settings
		scale = Math.max( scale, config.minScale );
		scale = Math.min( scale, config.maxScale );

		// Don't apply any scaling styles if scale is 1
		if( scale === 1 ) {
			element.style.zoom = '';
			element.style.left = '';
			element.style.top = '';
			element.style.bottom = '';
			element.style.right = '';
			transformElement( element, '' );
		}
		else {
			if(element.tagName == "H1"){
				element.style.fontSize = getHeaderFontSize()*scale + "px";
			}
			else{
				element.style.width = size.width + 'px';
				element.style.height = size.height + 'px';
				// Prefer zooming in desktop Chrome so that content remains crisp
				if( !isMobileDevice && /chrome/i.test( navigator.userAgent ) && typeof element.style.zoom !== 'undefined' ) {
					element.style.zoom = scale;
				}
				// Apply scale transform as a fallback
				else {
					element.style.left = '50%';
					element.style.top = '50%';
					element.style.bottom = 'auto';
					element.style.right = 'auto';
					transformElement( element, 'translate(-50%, -50%) scale('+ scale +')' );
				}
			}
		}
	}
  	
  }
  
  function getDefaultSize(element){
  	var dim;
  	if(element.tagName == "H1"){
  		dim = getTitleSize(elements[i], elements[i].getStyle("font"), getHeaderFontSize());
  	}
  	else{
  		var div = document.createElement('div');
 		div.innerHTML = element.innerHTML;
  		parent = document.querySelector('.reveal .header'); 
		parent.appendChild(div);
		dim = {width: div.children[0].offsetWidth, height: div.children[0].offsetHeight};
		parent.removeChild(div);
  	}
  	return dim;
  }
   
  function scaleAll(container){
  	elements = container.children;
  	var dim;
  	for(i = 0; i < elements.length; i++){
  		dim = getDefaultSize(elements[i]);
  		setHeaderScale(elements[i], dim['width'], dim['height']);
  	}
  }
  
  Element.prototype.positionTitle = function positionTitle(move){
  	headerWrapper = document.querySelector('.reveal .headerWrapper');
  	header = headerWrapper.children[0];
  	content = Reveal.getCurrentSlide().children 
  	title = content[0];
  	if(title.tagName == "H1"){
  		headerContent = header.children;
  		for(i = 0; i < headerContent.length; i++){
  			if(headerContent[i].tagName == "H1"){
  				previous = Reveal.getPreviousSlide();
  				if(previous){
  					previous.insertBefore(headerContent[i], previous.firstChild);
  				}
  				else{
  					header.removeChild(headerContent[i]);
  				}
  			}
  		}
  		if(move){
  			header.appendChild(title);
  			scaleAll(header);
  		   
	  		var offset = header.offsetHeight;
	  		var adjusted = false;
	  		for(i = 0; i < content.length && !adjusted; i++){
	  			if(!content[i].hasClass("popup")){
	  				if(!content[i].hasClass("adjusted")){
		  				var curMargin = parseInt(content[i].getStyle("marginTop"));
		  				content[i].style.marginTop = curMargin + offset + "px";
		  				content[i].className += " adjusted";
	  				}
	  				adjusted= true;
	  			}
	  		}
	  	}
  	}
  }
  
  function toggleHeader(){
  	if(Reveal.getCurrentSlide().isTitle()){
  		document.querySelector('.reveal .headerWrapper').style.visibility = 'hidden';
  	}
  	else{
  		document.querySelector('.reveal .headerWrapper').style.visibility = 'visible';
  	}
  	Reveal.getCurrentSlide().positionTitle(!Reveal.getCurrentSlide().isTitle());
  }
  
  
  Reveal.addEventListener('slidechanged', function(event) {
    toggleHeader();
  });

  window.addEventListener('resize', function(event){
  	if(!Reveal.getCurrentSlide().isTitle()){
  		scaleAll(document.querySelector('.reveal .header'));
  	}
  });
  
  toggleHeader();
  
  </script>
  $for(include-after)$
  $include-after$
  $endfor$
  </body>
</html>
